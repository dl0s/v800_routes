// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proute.proto

#ifndef PROTOBUF_proute_2eproto__INCLUDED
#define PROTOBUF_proute_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace data {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proute_2eproto();
void protobuf_AssignDesc_proute_2eproto();
void protobuf_ShutdownFile_proute_2eproto();

class PbRouteId;
class PbOneLineText;
class PbDate;
class PbTime;
class PbSystemDateTime;
class PbLocation;
class PbRoutePoint;
class PbPlannedRoute;

enum PbLocation_Fix {
  PbLocation_Fix_FIX_NONE = 0,
  PbLocation_Fix_FIX_2D = 1,
  PbLocation_Fix_FIX_3D = 2
};
bool PbLocation_Fix_IsValid(int value);
const PbLocation_Fix PbLocation_Fix_Fix_MIN = PbLocation_Fix_FIX_NONE;
const PbLocation_Fix PbLocation_Fix_Fix_MAX = PbLocation_Fix_FIX_3D;
const int PbLocation_Fix_Fix_ARRAYSIZE = PbLocation_Fix_Fix_MAX + 1;

const ::google::protobuf::EnumDescriptor* PbLocation_Fix_descriptor();
inline const ::std::string& PbLocation_Fix_Name(PbLocation_Fix value) {
  return ::google::protobuf::internal::NameOfEnum(
    PbLocation_Fix_descriptor(), value);
}
inline bool PbLocation_Fix_Parse(
    const ::std::string& name, PbLocation_Fix* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PbLocation_Fix>(
    PbLocation_Fix_descriptor(), name, value);
}
// ===================================================================

class PbRouteId : public ::google::protobuf::Message {
 public:
  PbRouteId();
  virtual ~PbRouteId();

  PbRouteId(const PbRouteId& from);

  inline PbRouteId& operator=(const PbRouteId& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRouteId& default_instance();

  void Swap(PbRouteId* other);

  // implements Message ----------------------------------------------

  PbRouteId* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRouteId& from);
  void MergeFrom(const PbRouteId& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::uint64 value() const;
  inline void set_value(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:data.PbRouteId)
 private:
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 value_;
  friend void  protobuf_AddDesc_proute_2eproto();
  friend void protobuf_AssignDesc_proute_2eproto();
  friend void protobuf_ShutdownFile_proute_2eproto();

  void InitAsDefaultInstance();
  static PbRouteId* default_instance_;
};
// -------------------------------------------------------------------

class PbOneLineText : public ::google::protobuf::Message {
 public:
  PbOneLineText();
  virtual ~PbOneLineText();

  PbOneLineText(const PbOneLineText& from);

  inline PbOneLineText& operator=(const PbOneLineText& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbOneLineText& default_instance();

  void Swap(PbOneLineText* other);

  // implements Message ----------------------------------------------

  PbOneLineText* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbOneLineText& from);
  void MergeFrom(const PbOneLineText& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string text = 1;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 1;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:data.PbOneLineText)
 private:
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* text_;
  friend void  protobuf_AddDesc_proute_2eproto();
  friend void protobuf_AssignDesc_proute_2eproto();
  friend void protobuf_ShutdownFile_proute_2eproto();

  void InitAsDefaultInstance();
  static PbOneLineText* default_instance_;
};
// -------------------------------------------------------------------

class PbDate : public ::google::protobuf::Message {
 public:
  PbDate();
  virtual ~PbDate();

  PbDate(const PbDate& from);

  inline PbDate& operator=(const PbDate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbDate& default_instance();

  void Swap(PbDate* other);

  // implements Message ----------------------------------------------

  PbDate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbDate& from);
  void MergeFrom(const PbDate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 year = 1;
  inline bool has_year() const;
  inline void clear_year();
  static const int kYearFieldNumber = 1;
  inline ::google::protobuf::uint32 year() const;
  inline void set_year(::google::protobuf::uint32 value);

  // required uint32 month = 2;
  inline bool has_month() const;
  inline void clear_month();
  static const int kMonthFieldNumber = 2;
  inline ::google::protobuf::uint32 month() const;
  inline void set_month(::google::protobuf::uint32 value);

  // required uint32 day = 3;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 3;
  inline ::google::protobuf::uint32 day() const;
  inline void set_day(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:data.PbDate)
 private:
  inline void set_has_year();
  inline void clear_has_year();
  inline void set_has_month();
  inline void clear_has_month();
  inline void set_has_day();
  inline void clear_has_day();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 year_;
  ::google::protobuf::uint32 month_;
  ::google::protobuf::uint32 day_;
  friend void  protobuf_AddDesc_proute_2eproto();
  friend void protobuf_AssignDesc_proute_2eproto();
  friend void protobuf_ShutdownFile_proute_2eproto();

  void InitAsDefaultInstance();
  static PbDate* default_instance_;
};
// -------------------------------------------------------------------

class PbTime : public ::google::protobuf::Message {
 public:
  PbTime();
  virtual ~PbTime();

  PbTime(const PbTime& from);

  inline PbTime& operator=(const PbTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbTime& default_instance();

  void Swap(PbTime* other);

  // implements Message ----------------------------------------------

  PbTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbTime& from);
  void MergeFrom(const PbTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 hour = 1;
  inline bool has_hour() const;
  inline void clear_hour();
  static const int kHourFieldNumber = 1;
  inline ::google::protobuf::uint32 hour() const;
  inline void set_hour(::google::protobuf::uint32 value);

  // required uint32 minute = 2;
  inline bool has_minute() const;
  inline void clear_minute();
  static const int kMinuteFieldNumber = 2;
  inline ::google::protobuf::uint32 minute() const;
  inline void set_minute(::google::protobuf::uint32 value);

  // required uint32 seconds = 3;
  inline bool has_seconds() const;
  inline void clear_seconds();
  static const int kSecondsFieldNumber = 3;
  inline ::google::protobuf::uint32 seconds() const;
  inline void set_seconds(::google::protobuf::uint32 value);

  // optional uint32 millis = 4 [default = 0];
  inline bool has_millis() const;
  inline void clear_millis();
  static const int kMillisFieldNumber = 4;
  inline ::google::protobuf::uint32 millis() const;
  inline void set_millis(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:data.PbTime)
 private:
  inline void set_has_hour();
  inline void clear_has_hour();
  inline void set_has_minute();
  inline void clear_has_minute();
  inline void set_has_seconds();
  inline void clear_has_seconds();
  inline void set_has_millis();
  inline void clear_has_millis();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 hour_;
  ::google::protobuf::uint32 minute_;
  ::google::protobuf::uint32 seconds_;
  ::google::protobuf::uint32 millis_;
  friend void  protobuf_AddDesc_proute_2eproto();
  friend void protobuf_AssignDesc_proute_2eproto();
  friend void protobuf_ShutdownFile_proute_2eproto();

  void InitAsDefaultInstance();
  static PbTime* default_instance_;
};
// -------------------------------------------------------------------

class PbSystemDateTime : public ::google::protobuf::Message {
 public:
  PbSystemDateTime();
  virtual ~PbSystemDateTime();

  PbSystemDateTime(const PbSystemDateTime& from);

  inline PbSystemDateTime& operator=(const PbSystemDateTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbSystemDateTime& default_instance();

  void Swap(PbSystemDateTime* other);

  // implements Message ----------------------------------------------

  PbSystemDateTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbSystemDateTime& from);
  void MergeFrom(const PbSystemDateTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .data.PbDate date = 1;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 1;
  inline const ::data::PbDate& date() const;
  inline ::data::PbDate* mutable_date();
  inline ::data::PbDate* release_date();
  inline void set_allocated_date(::data::PbDate* date);

  // required .data.PbTime time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline const ::data::PbTime& time() const;
  inline ::data::PbTime* mutable_time();
  inline ::data::PbTime* release_time();
  inline void set_allocated_time(::data::PbTime* time);

  // required bool trusted = 3;
  inline bool has_trusted() const;
  inline void clear_trusted();
  static const int kTrustedFieldNumber = 3;
  inline bool trusted() const;
  inline void set_trusted(bool value);

  // @@protoc_insertion_point(class_scope:data.PbSystemDateTime)
 private:
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_trusted();
  inline void clear_has_trusted();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::data::PbDate* date_;
  ::data::PbTime* time_;
  bool trusted_;
  friend void  protobuf_AddDesc_proute_2eproto();
  friend void protobuf_AssignDesc_proute_2eproto();
  friend void protobuf_ShutdownFile_proute_2eproto();

  void InitAsDefaultInstance();
  static PbSystemDateTime* default_instance_;
};
// -------------------------------------------------------------------

class PbLocation : public ::google::protobuf::Message {
 public:
  PbLocation();
  virtual ~PbLocation();

  PbLocation(const PbLocation& from);

  inline PbLocation& operator=(const PbLocation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbLocation& default_instance();

  void Swap(PbLocation* other);

  // implements Message ----------------------------------------------

  PbLocation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbLocation& from);
  void MergeFrom(const PbLocation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PbLocation_Fix Fix;
  static const Fix FIX_NONE = PbLocation_Fix_FIX_NONE;
  static const Fix FIX_2D = PbLocation_Fix_FIX_2D;
  static const Fix FIX_3D = PbLocation_Fix_FIX_3D;
  static inline bool Fix_IsValid(int value) {
    return PbLocation_Fix_IsValid(value);
  }
  static const Fix Fix_MIN =
    PbLocation_Fix_Fix_MIN;
  static const Fix Fix_MAX =
    PbLocation_Fix_Fix_MAX;
  static const int Fix_ARRAYSIZE =
    PbLocation_Fix_Fix_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Fix_descriptor() {
    return PbLocation_Fix_descriptor();
  }
  static inline const ::std::string& Fix_Name(Fix value) {
    return PbLocation_Fix_Name(value);
  }
  static inline bool Fix_Parse(const ::std::string& name,
      Fix* value) {
    return PbLocation_Fix_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required double latitude = 1;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 1;
  inline double latitude() const;
  inline void set_latitude(double value);

  // required double longitude = 2;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  inline double longitude() const;
  inline void set_longitude(double value);

  // optional .data.PbSystemDateTime timestamp = 3;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  inline const ::data::PbSystemDateTime& timestamp() const;
  inline ::data::PbSystemDateTime* mutable_timestamp();
  inline ::data::PbSystemDateTime* release_timestamp();
  inline void set_allocated_timestamp(::data::PbSystemDateTime* timestamp);

  // optional .data.PbLocation.Fix fix = 4;
  inline bool has_fix() const;
  inline void clear_fix();
  static const int kFixFieldNumber = 4;
  inline ::data::PbLocation_Fix fix() const;
  inline void set_fix(::data::PbLocation_Fix value);

  // optional uint32 satellites = 5 [default = 0];
  inline bool has_satellites() const;
  inline void clear_satellites();
  static const int kSatellitesFieldNumber = 5;
  inline ::google::protobuf::uint32 satellites() const;
  inline void set_satellites(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:data.PbLocation)
 private:
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_fix();
  inline void clear_has_fix();
  inline void set_has_satellites();
  inline void clear_has_satellites();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double latitude_;
  double longitude_;
  ::data::PbSystemDateTime* timestamp_;
  int fix_;
  ::google::protobuf::uint32 satellites_;
  friend void  protobuf_AddDesc_proute_2eproto();
  friend void protobuf_AssignDesc_proute_2eproto();
  friend void protobuf_ShutdownFile_proute_2eproto();

  void InitAsDefaultInstance();
  static PbLocation* default_instance_;
};
// -------------------------------------------------------------------

class PbRoutePoint : public ::google::protobuf::Message {
 public:
  PbRoutePoint();
  virtual ~PbRoutePoint();

  PbRoutePoint(const PbRoutePoint& from);

  inline PbRoutePoint& operator=(const PbRoutePoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRoutePoint& default_instance();

  void Swap(PbRoutePoint* other);

  // implements Message ----------------------------------------------

  PbRoutePoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRoutePoint& from);
  void MergeFrom(const PbRoutePoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 x_offset = 1;
  inline bool has_x_offset() const;
  inline void clear_x_offset();
  static const int kXOffsetFieldNumber = 1;
  inline ::google::protobuf::int32 x_offset() const;
  inline void set_x_offset(::google::protobuf::int32 value);

  // required sint32 y_offset = 2;
  inline bool has_y_offset() const;
  inline void clear_y_offset();
  static const int kYOffsetFieldNumber = 2;
  inline ::google::protobuf::int32 y_offset() const;
  inline void set_y_offset(::google::protobuf::int32 value);

  // optional uint32 time_offset = 3;
  inline bool has_time_offset() const;
  inline void clear_time_offset();
  static const int kTimeOffsetFieldNumber = 3;
  inline ::google::protobuf::uint32 time_offset() const;
  inline void set_time_offset(::google::protobuf::uint32 value);

  // optional sint32 z_offset = 4;
  inline bool has_z_offset() const;
  inline void clear_z_offset();
  static const int kZOffsetFieldNumber = 4;
  inline ::google::protobuf::int32 z_offset() const;
  inline void set_z_offset(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:data.PbRoutePoint)
 private:
  inline void set_has_x_offset();
  inline void clear_has_x_offset();
  inline void set_has_y_offset();
  inline void clear_has_y_offset();
  inline void set_has_time_offset();
  inline void clear_has_time_offset();
  inline void set_has_z_offset();
  inline void clear_has_z_offset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 x_offset_;
  ::google::protobuf::int32 y_offset_;
  ::google::protobuf::uint32 time_offset_;
  ::google::protobuf::int32 z_offset_;
  friend void  protobuf_AddDesc_proute_2eproto();
  friend void protobuf_AssignDesc_proute_2eproto();
  friend void protobuf_ShutdownFile_proute_2eproto();

  void InitAsDefaultInstance();
  static PbRoutePoint* default_instance_;
};
// -------------------------------------------------------------------

class PbPlannedRoute : public ::google::protobuf::Message {
 public:
  PbPlannedRoute();
  virtual ~PbPlannedRoute();

  PbPlannedRoute(const PbPlannedRoute& from);

  inline PbPlannedRoute& operator=(const PbPlannedRoute& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbPlannedRoute& default_instance();

  void Swap(PbPlannedRoute* other);

  // implements Message ----------------------------------------------

  PbPlannedRoute* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbPlannedRoute& from);
  void MergeFrom(const PbPlannedRoute& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .data.PbRouteId route_id = 1;
  inline bool has_route_id() const;
  inline void clear_route_id();
  static const int kRouteIdFieldNumber = 1;
  inline const ::data::PbRouteId& route_id() const;
  inline ::data::PbRouteId* mutable_route_id();
  inline ::data::PbRouteId* release_route_id();
  inline void set_allocated_route_id(::data::PbRouteId* route_id);

  // required .data.PbOneLineText name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::data::PbOneLineText& name() const;
  inline ::data::PbOneLineText* mutable_name();
  inline ::data::PbOneLineText* release_name();
  inline void set_allocated_name(::data::PbOneLineText* name);

  // optional float length = 3;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 3;
  inline float length() const;
  inline void set_length(float value);

  // optional .data.PbLocation start_location = 4;
  inline bool has_start_location() const;
  inline void clear_start_location();
  static const int kStartLocationFieldNumber = 4;
  inline const ::data::PbLocation& start_location() const;
  inline ::data::PbLocation* mutable_start_location();
  inline ::data::PbLocation* release_start_location();
  inline void set_allocated_start_location(::data::PbLocation* start_location);

  // optional float start_altitude = 5;
  inline bool has_start_altitude() const;
  inline void clear_start_altitude();
  static const int kStartAltitudeFieldNumber = 5;
  inline float start_altitude() const;
  inline void set_start_altitude(float value);

  // repeated .data.PbRoutePoint point = 6;
  inline int point_size() const;
  inline void clear_point();
  static const int kPointFieldNumber = 6;
  inline const ::data::PbRoutePoint& point(int index) const;
  inline ::data::PbRoutePoint* mutable_point(int index);
  inline ::data::PbRoutePoint* add_point();
  inline const ::google::protobuf::RepeatedPtrField< ::data::PbRoutePoint >&
      point() const;
  inline ::google::protobuf::RepeatedPtrField< ::data::PbRoutePoint >*
      mutable_point();

  // @@protoc_insertion_point(class_scope:data.PbPlannedRoute)
 private:
  inline void set_has_route_id();
  inline void clear_has_route_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_start_location();
  inline void clear_has_start_location();
  inline void set_has_start_altitude();
  inline void clear_has_start_altitude();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::data::PbRouteId* route_id_;
  ::data::PbOneLineText* name_;
  ::data::PbLocation* start_location_;
  float length_;
  float start_altitude_;
  ::google::protobuf::RepeatedPtrField< ::data::PbRoutePoint > point_;
  friend void  protobuf_AddDesc_proute_2eproto();
  friend void protobuf_AssignDesc_proute_2eproto();
  friend void protobuf_ShutdownFile_proute_2eproto();

  void InitAsDefaultInstance();
  static PbPlannedRoute* default_instance_;
};
// ===================================================================


// ===================================================================

// PbRouteId

// required uint64 value = 1;
inline bool PbRouteId::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRouteId::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRouteId::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRouteId::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::uint64 PbRouteId::value() const {
  // @@protoc_insertion_point(field_get:data.PbRouteId.value)
  return value_;
}
inline void PbRouteId::set_value(::google::protobuf::uint64 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:data.PbRouteId.value)
}

// -------------------------------------------------------------------

// PbOneLineText

// required string text = 1;
inline bool PbOneLineText::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbOneLineText::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbOneLineText::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbOneLineText::clear_text() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& PbOneLineText::text() const {
  // @@protoc_insertion_point(field_get:data.PbOneLineText.text)
  return *text_;
}
inline void PbOneLineText::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set:data.PbOneLineText.text)
}
inline void PbOneLineText::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set_char:data.PbOneLineText.text)
}
inline void PbOneLineText::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.PbOneLineText.text)
}
inline ::std::string* PbOneLineText::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:data.PbOneLineText.text)
  return text_;
}
inline ::std::string* PbOneLineText::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbOneLineText::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:data.PbOneLineText.text)
}

// -------------------------------------------------------------------

// PbDate

// required uint32 year = 1;
inline bool PbDate::has_year() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbDate::set_has_year() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbDate::clear_has_year() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbDate::clear_year() {
  year_ = 0u;
  clear_has_year();
}
inline ::google::protobuf::uint32 PbDate::year() const {
  // @@protoc_insertion_point(field_get:data.PbDate.year)
  return year_;
}
inline void PbDate::set_year(::google::protobuf::uint32 value) {
  set_has_year();
  year_ = value;
  // @@protoc_insertion_point(field_set:data.PbDate.year)
}

// required uint32 month = 2;
inline bool PbDate::has_month() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbDate::set_has_month() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbDate::clear_has_month() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbDate::clear_month() {
  month_ = 0u;
  clear_has_month();
}
inline ::google::protobuf::uint32 PbDate::month() const {
  // @@protoc_insertion_point(field_get:data.PbDate.month)
  return month_;
}
inline void PbDate::set_month(::google::protobuf::uint32 value) {
  set_has_month();
  month_ = value;
  // @@protoc_insertion_point(field_set:data.PbDate.month)
}

// required uint32 day = 3;
inline bool PbDate::has_day() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbDate::set_has_day() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbDate::clear_has_day() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbDate::clear_day() {
  day_ = 0u;
  clear_has_day();
}
inline ::google::protobuf::uint32 PbDate::day() const {
  // @@protoc_insertion_point(field_get:data.PbDate.day)
  return day_;
}
inline void PbDate::set_day(::google::protobuf::uint32 value) {
  set_has_day();
  day_ = value;
  // @@protoc_insertion_point(field_set:data.PbDate.day)
}

// -------------------------------------------------------------------

// PbTime

// required uint32 hour = 1;
inline bool PbTime::has_hour() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbTime::set_has_hour() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbTime::clear_has_hour() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbTime::clear_hour() {
  hour_ = 0u;
  clear_has_hour();
}
inline ::google::protobuf::uint32 PbTime::hour() const {
  // @@protoc_insertion_point(field_get:data.PbTime.hour)
  return hour_;
}
inline void PbTime::set_hour(::google::protobuf::uint32 value) {
  set_has_hour();
  hour_ = value;
  // @@protoc_insertion_point(field_set:data.PbTime.hour)
}

// required uint32 minute = 2;
inline bool PbTime::has_minute() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbTime::set_has_minute() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbTime::clear_has_minute() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbTime::clear_minute() {
  minute_ = 0u;
  clear_has_minute();
}
inline ::google::protobuf::uint32 PbTime::minute() const {
  // @@protoc_insertion_point(field_get:data.PbTime.minute)
  return minute_;
}
inline void PbTime::set_minute(::google::protobuf::uint32 value) {
  set_has_minute();
  minute_ = value;
  // @@protoc_insertion_point(field_set:data.PbTime.minute)
}

// required uint32 seconds = 3;
inline bool PbTime::has_seconds() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbTime::set_has_seconds() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbTime::clear_has_seconds() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbTime::clear_seconds() {
  seconds_ = 0u;
  clear_has_seconds();
}
inline ::google::protobuf::uint32 PbTime::seconds() const {
  // @@protoc_insertion_point(field_get:data.PbTime.seconds)
  return seconds_;
}
inline void PbTime::set_seconds(::google::protobuf::uint32 value) {
  set_has_seconds();
  seconds_ = value;
  // @@protoc_insertion_point(field_set:data.PbTime.seconds)
}

// optional uint32 millis = 4 [default = 0];
inline bool PbTime::has_millis() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PbTime::set_has_millis() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PbTime::clear_has_millis() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PbTime::clear_millis() {
  millis_ = 0u;
  clear_has_millis();
}
inline ::google::protobuf::uint32 PbTime::millis() const {
  // @@protoc_insertion_point(field_get:data.PbTime.millis)
  return millis_;
}
inline void PbTime::set_millis(::google::protobuf::uint32 value) {
  set_has_millis();
  millis_ = value;
  // @@protoc_insertion_point(field_set:data.PbTime.millis)
}

// -------------------------------------------------------------------

// PbSystemDateTime

// required .data.PbDate date = 1;
inline bool PbSystemDateTime::has_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbSystemDateTime::set_has_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbSystemDateTime::clear_has_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbSystemDateTime::clear_date() {
  if (date_ != NULL) date_->::data::PbDate::Clear();
  clear_has_date();
}
inline const ::data::PbDate& PbSystemDateTime::date() const {
  // @@protoc_insertion_point(field_get:data.PbSystemDateTime.date)
  return date_ != NULL ? *date_ : *default_instance_->date_;
}
inline ::data::PbDate* PbSystemDateTime::mutable_date() {
  set_has_date();
  if (date_ == NULL) date_ = new ::data::PbDate;
  // @@protoc_insertion_point(field_mutable:data.PbSystemDateTime.date)
  return date_;
}
inline ::data::PbDate* PbSystemDateTime::release_date() {
  clear_has_date();
  ::data::PbDate* temp = date_;
  date_ = NULL;
  return temp;
}
inline void PbSystemDateTime::set_allocated_date(::data::PbDate* date) {
  delete date_;
  date_ = date;
  if (date) {
    set_has_date();
  } else {
    clear_has_date();
  }
  // @@protoc_insertion_point(field_set_allocated:data.PbSystemDateTime.date)
}

// required .data.PbTime time = 2;
inline bool PbSystemDateTime::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbSystemDateTime::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbSystemDateTime::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbSystemDateTime::clear_time() {
  if (time_ != NULL) time_->::data::PbTime::Clear();
  clear_has_time();
}
inline const ::data::PbTime& PbSystemDateTime::time() const {
  // @@protoc_insertion_point(field_get:data.PbSystemDateTime.time)
  return time_ != NULL ? *time_ : *default_instance_->time_;
}
inline ::data::PbTime* PbSystemDateTime::mutable_time() {
  set_has_time();
  if (time_ == NULL) time_ = new ::data::PbTime;
  // @@protoc_insertion_point(field_mutable:data.PbSystemDateTime.time)
  return time_;
}
inline ::data::PbTime* PbSystemDateTime::release_time() {
  clear_has_time();
  ::data::PbTime* temp = time_;
  time_ = NULL;
  return temp;
}
inline void PbSystemDateTime::set_allocated_time(::data::PbTime* time) {
  delete time_;
  time_ = time;
  if (time) {
    set_has_time();
  } else {
    clear_has_time();
  }
  // @@protoc_insertion_point(field_set_allocated:data.PbSystemDateTime.time)
}

// required bool trusted = 3;
inline bool PbSystemDateTime::has_trusted() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbSystemDateTime::set_has_trusted() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbSystemDateTime::clear_has_trusted() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbSystemDateTime::clear_trusted() {
  trusted_ = false;
  clear_has_trusted();
}
inline bool PbSystemDateTime::trusted() const {
  // @@protoc_insertion_point(field_get:data.PbSystemDateTime.trusted)
  return trusted_;
}
inline void PbSystemDateTime::set_trusted(bool value) {
  set_has_trusted();
  trusted_ = value;
  // @@protoc_insertion_point(field_set:data.PbSystemDateTime.trusted)
}

// -------------------------------------------------------------------

// PbLocation

// required double latitude = 1;
inline bool PbLocation::has_latitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbLocation::set_has_latitude() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbLocation::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbLocation::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double PbLocation::latitude() const {
  // @@protoc_insertion_point(field_get:data.PbLocation.latitude)
  return latitude_;
}
inline void PbLocation::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:data.PbLocation.latitude)
}

// required double longitude = 2;
inline bool PbLocation::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbLocation::set_has_longitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbLocation::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbLocation::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double PbLocation::longitude() const {
  // @@protoc_insertion_point(field_get:data.PbLocation.longitude)
  return longitude_;
}
inline void PbLocation::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:data.PbLocation.longitude)
}

// optional .data.PbSystemDateTime timestamp = 3;
inline bool PbLocation::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbLocation::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbLocation::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbLocation::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::data::PbSystemDateTime::Clear();
  clear_has_timestamp();
}
inline const ::data::PbSystemDateTime& PbLocation::timestamp() const {
  // @@protoc_insertion_point(field_get:data.PbLocation.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::data::PbSystemDateTime* PbLocation::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) timestamp_ = new ::data::PbSystemDateTime;
  // @@protoc_insertion_point(field_mutable:data.PbLocation.timestamp)
  return timestamp_;
}
inline ::data::PbSystemDateTime* PbLocation::release_timestamp() {
  clear_has_timestamp();
  ::data::PbSystemDateTime* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void PbLocation::set_allocated_timestamp(::data::PbSystemDateTime* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:data.PbLocation.timestamp)
}

// optional .data.PbLocation.Fix fix = 4;
inline bool PbLocation::has_fix() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PbLocation::set_has_fix() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PbLocation::clear_has_fix() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PbLocation::clear_fix() {
  fix_ = 0;
  clear_has_fix();
}
inline ::data::PbLocation_Fix PbLocation::fix() const {
  // @@protoc_insertion_point(field_get:data.PbLocation.fix)
  return static_cast< ::data::PbLocation_Fix >(fix_);
}
inline void PbLocation::set_fix(::data::PbLocation_Fix value) {
  assert(::data::PbLocation_Fix_IsValid(value));
  set_has_fix();
  fix_ = value;
  // @@protoc_insertion_point(field_set:data.PbLocation.fix)
}

// optional uint32 satellites = 5 [default = 0];
inline bool PbLocation::has_satellites() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PbLocation::set_has_satellites() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PbLocation::clear_has_satellites() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PbLocation::clear_satellites() {
  satellites_ = 0u;
  clear_has_satellites();
}
inline ::google::protobuf::uint32 PbLocation::satellites() const {
  // @@protoc_insertion_point(field_get:data.PbLocation.satellites)
  return satellites_;
}
inline void PbLocation::set_satellites(::google::protobuf::uint32 value) {
  set_has_satellites();
  satellites_ = value;
  // @@protoc_insertion_point(field_set:data.PbLocation.satellites)
}

// -------------------------------------------------------------------

// PbRoutePoint

// required sint32 x_offset = 1;
inline bool PbRoutePoint::has_x_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRoutePoint::set_has_x_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRoutePoint::clear_has_x_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRoutePoint::clear_x_offset() {
  x_offset_ = 0;
  clear_has_x_offset();
}
inline ::google::protobuf::int32 PbRoutePoint::x_offset() const {
  // @@protoc_insertion_point(field_get:data.PbRoutePoint.x_offset)
  return x_offset_;
}
inline void PbRoutePoint::set_x_offset(::google::protobuf::int32 value) {
  set_has_x_offset();
  x_offset_ = value;
  // @@protoc_insertion_point(field_set:data.PbRoutePoint.x_offset)
}

// required sint32 y_offset = 2;
inline bool PbRoutePoint::has_y_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbRoutePoint::set_has_y_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbRoutePoint::clear_has_y_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbRoutePoint::clear_y_offset() {
  y_offset_ = 0;
  clear_has_y_offset();
}
inline ::google::protobuf::int32 PbRoutePoint::y_offset() const {
  // @@protoc_insertion_point(field_get:data.PbRoutePoint.y_offset)
  return y_offset_;
}
inline void PbRoutePoint::set_y_offset(::google::protobuf::int32 value) {
  set_has_y_offset();
  y_offset_ = value;
  // @@protoc_insertion_point(field_set:data.PbRoutePoint.y_offset)
}

// optional uint32 time_offset = 3;
inline bool PbRoutePoint::has_time_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbRoutePoint::set_has_time_offset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbRoutePoint::clear_has_time_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbRoutePoint::clear_time_offset() {
  time_offset_ = 0u;
  clear_has_time_offset();
}
inline ::google::protobuf::uint32 PbRoutePoint::time_offset() const {
  // @@protoc_insertion_point(field_get:data.PbRoutePoint.time_offset)
  return time_offset_;
}
inline void PbRoutePoint::set_time_offset(::google::protobuf::uint32 value) {
  set_has_time_offset();
  time_offset_ = value;
  // @@protoc_insertion_point(field_set:data.PbRoutePoint.time_offset)
}

// optional sint32 z_offset = 4;
inline bool PbRoutePoint::has_z_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PbRoutePoint::set_has_z_offset() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PbRoutePoint::clear_has_z_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PbRoutePoint::clear_z_offset() {
  z_offset_ = 0;
  clear_has_z_offset();
}
inline ::google::protobuf::int32 PbRoutePoint::z_offset() const {
  // @@protoc_insertion_point(field_get:data.PbRoutePoint.z_offset)
  return z_offset_;
}
inline void PbRoutePoint::set_z_offset(::google::protobuf::int32 value) {
  set_has_z_offset();
  z_offset_ = value;
  // @@protoc_insertion_point(field_set:data.PbRoutePoint.z_offset)
}

// -------------------------------------------------------------------

// PbPlannedRoute

// required .data.PbRouteId route_id = 1;
inline bool PbPlannedRoute::has_route_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbPlannedRoute::set_has_route_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbPlannedRoute::clear_has_route_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbPlannedRoute::clear_route_id() {
  if (route_id_ != NULL) route_id_->::data::PbRouteId::Clear();
  clear_has_route_id();
}
inline const ::data::PbRouteId& PbPlannedRoute::route_id() const {
  // @@protoc_insertion_point(field_get:data.PbPlannedRoute.route_id)
  return route_id_ != NULL ? *route_id_ : *default_instance_->route_id_;
}
inline ::data::PbRouteId* PbPlannedRoute::mutable_route_id() {
  set_has_route_id();
  if (route_id_ == NULL) route_id_ = new ::data::PbRouteId;
  // @@protoc_insertion_point(field_mutable:data.PbPlannedRoute.route_id)
  return route_id_;
}
inline ::data::PbRouteId* PbPlannedRoute::release_route_id() {
  clear_has_route_id();
  ::data::PbRouteId* temp = route_id_;
  route_id_ = NULL;
  return temp;
}
inline void PbPlannedRoute::set_allocated_route_id(::data::PbRouteId* route_id) {
  delete route_id_;
  route_id_ = route_id;
  if (route_id) {
    set_has_route_id();
  } else {
    clear_has_route_id();
  }
  // @@protoc_insertion_point(field_set_allocated:data.PbPlannedRoute.route_id)
}

// required .data.PbOneLineText name = 2;
inline bool PbPlannedRoute::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbPlannedRoute::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbPlannedRoute::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbPlannedRoute::clear_name() {
  if (name_ != NULL) name_->::data::PbOneLineText::Clear();
  clear_has_name();
}
inline const ::data::PbOneLineText& PbPlannedRoute::name() const {
  // @@protoc_insertion_point(field_get:data.PbPlannedRoute.name)
  return name_ != NULL ? *name_ : *default_instance_->name_;
}
inline ::data::PbOneLineText* PbPlannedRoute::mutable_name() {
  set_has_name();
  if (name_ == NULL) name_ = new ::data::PbOneLineText;
  // @@protoc_insertion_point(field_mutable:data.PbPlannedRoute.name)
  return name_;
}
inline ::data::PbOneLineText* PbPlannedRoute::release_name() {
  clear_has_name();
  ::data::PbOneLineText* temp = name_;
  name_ = NULL;
  return temp;
}
inline void PbPlannedRoute::set_allocated_name(::data::PbOneLineText* name) {
  delete name_;
  name_ = name;
  if (name) {
    set_has_name();
  } else {
    clear_has_name();
  }
  // @@protoc_insertion_point(field_set_allocated:data.PbPlannedRoute.name)
}

// optional float length = 3;
inline bool PbPlannedRoute::has_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbPlannedRoute::set_has_length() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbPlannedRoute::clear_has_length() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbPlannedRoute::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline float PbPlannedRoute::length() const {
  // @@protoc_insertion_point(field_get:data.PbPlannedRoute.length)
  return length_;
}
inline void PbPlannedRoute::set_length(float value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:data.PbPlannedRoute.length)
}

// optional .data.PbLocation start_location = 4;
inline bool PbPlannedRoute::has_start_location() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PbPlannedRoute::set_has_start_location() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PbPlannedRoute::clear_has_start_location() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PbPlannedRoute::clear_start_location() {
  if (start_location_ != NULL) start_location_->::data::PbLocation::Clear();
  clear_has_start_location();
}
inline const ::data::PbLocation& PbPlannedRoute::start_location() const {
  // @@protoc_insertion_point(field_get:data.PbPlannedRoute.start_location)
  return start_location_ != NULL ? *start_location_ : *default_instance_->start_location_;
}
inline ::data::PbLocation* PbPlannedRoute::mutable_start_location() {
  set_has_start_location();
  if (start_location_ == NULL) start_location_ = new ::data::PbLocation;
  // @@protoc_insertion_point(field_mutable:data.PbPlannedRoute.start_location)
  return start_location_;
}
inline ::data::PbLocation* PbPlannedRoute::release_start_location() {
  clear_has_start_location();
  ::data::PbLocation* temp = start_location_;
  start_location_ = NULL;
  return temp;
}
inline void PbPlannedRoute::set_allocated_start_location(::data::PbLocation* start_location) {
  delete start_location_;
  start_location_ = start_location;
  if (start_location) {
    set_has_start_location();
  } else {
    clear_has_start_location();
  }
  // @@protoc_insertion_point(field_set_allocated:data.PbPlannedRoute.start_location)
}

// optional float start_altitude = 5;
inline bool PbPlannedRoute::has_start_altitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PbPlannedRoute::set_has_start_altitude() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PbPlannedRoute::clear_has_start_altitude() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PbPlannedRoute::clear_start_altitude() {
  start_altitude_ = 0;
  clear_has_start_altitude();
}
inline float PbPlannedRoute::start_altitude() const {
  // @@protoc_insertion_point(field_get:data.PbPlannedRoute.start_altitude)
  return start_altitude_;
}
inline void PbPlannedRoute::set_start_altitude(float value) {
  set_has_start_altitude();
  start_altitude_ = value;
  // @@protoc_insertion_point(field_set:data.PbPlannedRoute.start_altitude)
}

// repeated .data.PbRoutePoint point = 6;
inline int PbPlannedRoute::point_size() const {
  return point_.size();
}
inline void PbPlannedRoute::clear_point() {
  point_.Clear();
}
inline const ::data::PbRoutePoint& PbPlannedRoute::point(int index) const {
  // @@protoc_insertion_point(field_get:data.PbPlannedRoute.point)
  return point_.Get(index);
}
inline ::data::PbRoutePoint* PbPlannedRoute::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:data.PbPlannedRoute.point)
  return point_.Mutable(index);
}
inline ::data::PbRoutePoint* PbPlannedRoute::add_point() {
  // @@protoc_insertion_point(field_add:data.PbPlannedRoute.point)
  return point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::data::PbRoutePoint >&
PbPlannedRoute::point() const {
  // @@protoc_insertion_point(field_list:data.PbPlannedRoute.point)
  return point_;
}
inline ::google::protobuf::RepeatedPtrField< ::data::PbRoutePoint >*
PbPlannedRoute::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:data.PbPlannedRoute.point)
  return &point_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace data

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::data::PbLocation_Fix> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::data::PbLocation_Fix>() {
  return ::data::PbLocation_Fix_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proute_2eproto__INCLUDED
