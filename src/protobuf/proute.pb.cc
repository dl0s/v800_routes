// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proute.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proute.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace data {

namespace {

const ::google::protobuf::Descriptor* PbRouteId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRouteId_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbOneLineText_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbOneLineText_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbDate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbDate_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbSystemDateTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbSystemDateTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbLocation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbLocation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PbLocation_Fix_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PbRoutePoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRoutePoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbPlannedRoute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbPlannedRoute_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proute_2eproto() {
  protobuf_AddDesc_proute_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proute.proto");
  GOOGLE_CHECK(file != NULL);
  PbRouteId_descriptor_ = file->message_type(0);
  static const int PbRouteId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRouteId, value_),
  };
  PbRouteId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRouteId_descriptor_,
      PbRouteId::default_instance_,
      PbRouteId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRouteId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRouteId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRouteId));
  PbOneLineText_descriptor_ = file->message_type(1);
  static const int PbOneLineText_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbOneLineText, text_),
  };
  PbOneLineText_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbOneLineText_descriptor_,
      PbOneLineText::default_instance_,
      PbOneLineText_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbOneLineText, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbOneLineText, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbOneLineText));
  PbDate_descriptor_ = file->message_type(2);
  static const int PbDate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbDate, year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbDate, month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbDate, day_),
  };
  PbDate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbDate_descriptor_,
      PbDate::default_instance_,
      PbDate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbDate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbDate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbDate));
  PbTime_descriptor_ = file->message_type(3);
  static const int PbTime_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbTime, hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbTime, minute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbTime, seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbTime, millis_),
  };
  PbTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbTime_descriptor_,
      PbTime::default_instance_,
      PbTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbTime));
  PbSystemDateTime_descriptor_ = file->message_type(4);
  static const int PbSystemDateTime_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbSystemDateTime, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbSystemDateTime, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbSystemDateTime, trusted_),
  };
  PbSystemDateTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbSystemDateTime_descriptor_,
      PbSystemDateTime::default_instance_,
      PbSystemDateTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbSystemDateTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbSystemDateTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbSystemDateTime));
  PbLocation_descriptor_ = file->message_type(5);
  static const int PbLocation_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbLocation, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbLocation, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbLocation, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbLocation, fix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbLocation, satellites_),
  };
  PbLocation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbLocation_descriptor_,
      PbLocation::default_instance_,
      PbLocation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbLocation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbLocation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbLocation));
  PbLocation_Fix_descriptor_ = PbLocation_descriptor_->enum_type(0);
  PbRoutePoint_descriptor_ = file->message_type(6);
  static const int PbRoutePoint_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRoutePoint, x_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRoutePoint, y_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRoutePoint, time_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRoutePoint, z_offset_),
  };
  PbRoutePoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRoutePoint_descriptor_,
      PbRoutePoint::default_instance_,
      PbRoutePoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRoutePoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRoutePoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRoutePoint));
  PbPlannedRoute_descriptor_ = file->message_type(7);
  static const int PbPlannedRoute_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbPlannedRoute, route_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbPlannedRoute, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbPlannedRoute, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbPlannedRoute, start_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbPlannedRoute, start_altitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbPlannedRoute, point_),
  };
  PbPlannedRoute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbPlannedRoute_descriptor_,
      PbPlannedRoute::default_instance_,
      PbPlannedRoute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbPlannedRoute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbPlannedRoute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbPlannedRoute));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proute_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRouteId_descriptor_, &PbRouteId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbOneLineText_descriptor_, &PbOneLineText::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbDate_descriptor_, &PbDate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbTime_descriptor_, &PbTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbSystemDateTime_descriptor_, &PbSystemDateTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbLocation_descriptor_, &PbLocation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRoutePoint_descriptor_, &PbRoutePoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbPlannedRoute_descriptor_, &PbPlannedRoute::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proute_2eproto() {
  delete PbRouteId::default_instance_;
  delete PbRouteId_reflection_;
  delete PbOneLineText::default_instance_;
  delete PbOneLineText_reflection_;
  delete PbDate::default_instance_;
  delete PbDate_reflection_;
  delete PbTime::default_instance_;
  delete PbTime_reflection_;
  delete PbSystemDateTime::default_instance_;
  delete PbSystemDateTime_reflection_;
  delete PbLocation::default_instance_;
  delete PbLocation_reflection_;
  delete PbRoutePoint::default_instance_;
  delete PbRoutePoint_reflection_;
  delete PbPlannedRoute::default_instance_;
  delete PbPlannedRoute_reflection_;
}

void protobuf_AddDesc_proute_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014proute.proto\022\004data\"\032\n\tPbRouteId\022\r\n\005val"
    "ue\030\001 \002(\004\"\035\n\rPbOneLineText\022\014\n\004text\030\001 \002(\t\""
    "2\n\006PbDate\022\014\n\004year\030\001 \002(\r\022\r\n\005month\030\002 \002(\r\022\013"
    "\n\003day\030\003 \002(\r\"J\n\006PbTime\022\014\n\004hour\030\001 \002(\r\022\016\n\006m"
    "inute\030\002 \002(\r\022\017\n\007seconds\030\003 \002(\r\022\021\n\006millis\030\004"
    " \001(\r:\0010\"[\n\020PbSystemDateTime\022\032\n\004date\030\001 \002("
    "\0132\014.data.PbDate\022\032\n\004time\030\002 \002(\0132\014.data.PbT"
    "ime\022\017\n\007trusted\030\003 \002(\010\"\303\001\n\nPbLocation\022\020\n\010l"
    "atitude\030\001 \002(\001\022\021\n\tlongitude\030\002 \002(\001\022)\n\ttime"
    "stamp\030\003 \001(\0132\026.data.PbSystemDateTime\022!\n\003f"
    "ix\030\004 \001(\0162\024.data.PbLocation.Fix\022\025\n\nsatell"
    "ites\030\005 \001(\r:\0010\"+\n\003Fix\022\014\n\010FIX_NONE\020\000\022\n\n\006FI"
    "X_2D\020\001\022\n\n\006FIX_3D\020\002\"Y\n\014PbRoutePoint\022\020\n\010x_"
    "offset\030\001 \002(\021\022\020\n\010y_offset\030\002 \002(\021\022\023\n\013time_o"
    "ffset\030\003 \001(\r\022\020\n\010z_offset\030\004 \001(\021\"\313\001\n\016PbPlan"
    "nedRoute\022!\n\010route_id\030\001 \002(\0132\017.data.PbRout"
    "eId\022!\n\004name\030\002 \002(\0132\023.data.PbOneLineText\022\016"
    "\n\006length\030\003 \001(\002\022(\n\016start_location\030\004 \001(\0132\020"
    ".data.PbLocation\022\026\n\016start_altitude\030\005 \001(\002"
    "\022!\n\005point\030\006 \003(\0132\022.data.PbRoutePoint", 795);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proute.proto", &protobuf_RegisterTypes);
  PbRouteId::default_instance_ = new PbRouteId();
  PbOneLineText::default_instance_ = new PbOneLineText();
  PbDate::default_instance_ = new PbDate();
  PbTime::default_instance_ = new PbTime();
  PbSystemDateTime::default_instance_ = new PbSystemDateTime();
  PbLocation::default_instance_ = new PbLocation();
  PbRoutePoint::default_instance_ = new PbRoutePoint();
  PbPlannedRoute::default_instance_ = new PbPlannedRoute();
  PbRouteId::default_instance_->InitAsDefaultInstance();
  PbOneLineText::default_instance_->InitAsDefaultInstance();
  PbDate::default_instance_->InitAsDefaultInstance();
  PbTime::default_instance_->InitAsDefaultInstance();
  PbSystemDateTime::default_instance_->InitAsDefaultInstance();
  PbLocation::default_instance_->InitAsDefaultInstance();
  PbRoutePoint::default_instance_->InitAsDefaultInstance();
  PbPlannedRoute::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proute_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proute_2eproto {
  StaticDescriptorInitializer_proute_2eproto() {
    protobuf_AddDesc_proute_2eproto();
  }
} static_descriptor_initializer_proute_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PbRouteId::kValueFieldNumber;
#endif  // !_MSC_VER

PbRouteId::PbRouteId()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.PbRouteId)
}

void PbRouteId::InitAsDefaultInstance() {
}

PbRouteId::PbRouteId(const PbRouteId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.PbRouteId)
}

void PbRouteId::SharedCtor() {
  _cached_size_ = 0;
  value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRouteId::~PbRouteId() {
  // @@protoc_insertion_point(destructor:data.PbRouteId)
  SharedDtor();
}

void PbRouteId::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbRouteId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRouteId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRouteId_descriptor_;
}

const PbRouteId& PbRouteId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proute_2eproto();
  return *default_instance_;
}

PbRouteId* PbRouteId::default_instance_ = NULL;

PbRouteId* PbRouteId::New() const {
  return new PbRouteId;
}

void PbRouteId::Clear() {
  value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRouteId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.PbRouteId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.PbRouteId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.PbRouteId)
  return false;
#undef DO_
}

void PbRouteId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.PbRouteId)
  // required uint64 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.PbRouteId)
}

::google::protobuf::uint8* PbRouteId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.PbRouteId)
  // required uint64 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.PbRouteId)
  return target;
}

int PbRouteId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRouteId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRouteId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRouteId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRouteId::MergeFrom(const PbRouteId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRouteId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRouteId::CopyFrom(const PbRouteId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRouteId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PbRouteId::Swap(PbRouteId* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRouteId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRouteId_descriptor_;
  metadata.reflection = PbRouteId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbOneLineText::kTextFieldNumber;
#endif  // !_MSC_VER

PbOneLineText::PbOneLineText()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.PbOneLineText)
}

void PbOneLineText::InitAsDefaultInstance() {
}

PbOneLineText::PbOneLineText(const PbOneLineText& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.PbOneLineText)
}

void PbOneLineText::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbOneLineText::~PbOneLineText() {
  // @@protoc_insertion_point(destructor:data.PbOneLineText)
  SharedDtor();
}

void PbOneLineText::SharedDtor() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void PbOneLineText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbOneLineText::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbOneLineText_descriptor_;
}

const PbOneLineText& PbOneLineText::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proute_2eproto();
  return *default_instance_;
}

PbOneLineText* PbOneLineText::default_instance_ = NULL;

PbOneLineText* PbOneLineText::New() const {
  return new PbOneLineText;
}

void PbOneLineText::Clear() {
  if (has_text()) {
    if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      text_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbOneLineText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.PbOneLineText)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string text = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.PbOneLineText)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.PbOneLineText)
  return false;
#undef DO_
}

void PbOneLineText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.PbOneLineText)
  // required string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.PbOneLineText)
}

::google::protobuf::uint8* PbOneLineText::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.PbOneLineText)
  // required string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.PbOneLineText)
  return target;
}

int PbOneLineText::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbOneLineText::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbOneLineText* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbOneLineText*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbOneLineText::MergeFrom(const PbOneLineText& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbOneLineText::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbOneLineText::CopyFrom(const PbOneLineText& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbOneLineText::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PbOneLineText::Swap(PbOneLineText* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbOneLineText::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbOneLineText_descriptor_;
  metadata.reflection = PbOneLineText_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbDate::kYearFieldNumber;
const int PbDate::kMonthFieldNumber;
const int PbDate::kDayFieldNumber;
#endif  // !_MSC_VER

PbDate::PbDate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.PbDate)
}

void PbDate::InitAsDefaultInstance() {
}

PbDate::PbDate(const PbDate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.PbDate)
}

void PbDate::SharedCtor() {
  _cached_size_ = 0;
  year_ = 0u;
  month_ = 0u;
  day_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbDate::~PbDate() {
  // @@protoc_insertion_point(destructor:data.PbDate)
  SharedDtor();
}

void PbDate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbDate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbDate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbDate_descriptor_;
}

const PbDate& PbDate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proute_2eproto();
  return *default_instance_;
}

PbDate* PbDate::default_instance_ = NULL;

PbDate* PbDate::New() const {
  return new PbDate;
}

void PbDate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbDate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(year_, day_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbDate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.PbDate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 year = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &year_)));
          set_has_year();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_month;
        break;
      }

      // required uint32 month = 2;
      case 2: {
        if (tag == 16) {
         parse_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &month_)));
          set_has_month();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_day;
        break;
      }

      // required uint32 day = 3;
      case 3: {
        if (tag == 24) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.PbDate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.PbDate)
  return false;
#undef DO_
}

void PbDate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.PbDate)
  // required uint32 year = 1;
  if (has_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->year(), output);
  }

  // required uint32 month = 2;
  if (has_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->month(), output);
  }

  // required uint32 day = 3;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->day(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.PbDate)
}

::google::protobuf::uint8* PbDate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.PbDate)
  // required uint32 year = 1;
  if (has_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->year(), target);
  }

  // required uint32 month = 2;
  if (has_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->month(), target);
  }

  // required uint32 day = 3;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->day(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.PbDate)
  return target;
}

int PbDate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 year = 1;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->year());
    }

    // required uint32 month = 2;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->month());
    }

    // required uint32 day = 3;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbDate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbDate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbDate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbDate::MergeFrom(const PbDate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_year()) {
      set_year(from.year());
    }
    if (from.has_month()) {
      set_month(from.month());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbDate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbDate::CopyFrom(const PbDate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbDate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PbDate::Swap(PbDate* other) {
  if (other != this) {
    std::swap(year_, other->year_);
    std::swap(month_, other->month_);
    std::swap(day_, other->day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbDate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbDate_descriptor_;
  metadata.reflection = PbDate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbTime::kHourFieldNumber;
const int PbTime::kMinuteFieldNumber;
const int PbTime::kSecondsFieldNumber;
const int PbTime::kMillisFieldNumber;
#endif  // !_MSC_VER

PbTime::PbTime()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.PbTime)
}

void PbTime::InitAsDefaultInstance() {
}

PbTime::PbTime(const PbTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.PbTime)
}

void PbTime::SharedCtor() {
  _cached_size_ = 0;
  hour_ = 0u;
  minute_ = 0u;
  seconds_ = 0u;
  millis_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbTime::~PbTime() {
  // @@protoc_insertion_point(destructor:data.PbTime)
  SharedDtor();
}

void PbTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbTime_descriptor_;
}

const PbTime& PbTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proute_2eproto();
  return *default_instance_;
}

PbTime* PbTime::default_instance_ = NULL;

PbTime* PbTime::New() const {
  return new PbTime;
}

void PbTime::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbTime*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hour_, millis_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.PbTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hour = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hour_)));
          set_has_hour();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_minute;
        break;
      }

      // required uint32 minute = 2;
      case 2: {
        if (tag == 16) {
         parse_minute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minute_)));
          set_has_minute();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_seconds;
        break;
      }

      // required uint32 seconds = 3;
      case 3: {
        if (tag == 24) {
         parse_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_)));
          set_has_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_millis;
        break;
      }

      // optional uint32 millis = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_millis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &millis_)));
          set_has_millis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.PbTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.PbTime)
  return false;
#undef DO_
}

void PbTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.PbTime)
  // required uint32 hour = 1;
  if (has_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hour(), output);
  }

  // required uint32 minute = 2;
  if (has_minute()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->minute(), output);
  }

  // required uint32 seconds = 3;
  if (has_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->seconds(), output);
  }

  // optional uint32 millis = 4 [default = 0];
  if (has_millis()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->millis(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.PbTime)
}

::google::protobuf::uint8* PbTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.PbTime)
  // required uint32 hour = 1;
  if (has_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hour(), target);
  }

  // required uint32 minute = 2;
  if (has_minute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->minute(), target);
  }

  // required uint32 seconds = 3;
  if (has_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->seconds(), target);
  }

  // optional uint32 millis = 4 [default = 0];
  if (has_millis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->millis(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.PbTime)
  return target;
}

int PbTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hour = 1;
    if (has_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hour());
    }

    // required uint32 minute = 2;
    if (has_minute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minute());
    }

    // required uint32 seconds = 3;
    if (has_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds());
    }

    // optional uint32 millis = 4 [default = 0];
    if (has_millis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->millis());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbTime::MergeFrom(const PbTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hour()) {
      set_hour(from.hour());
    }
    if (from.has_minute()) {
      set_minute(from.minute());
    }
    if (from.has_seconds()) {
      set_seconds(from.seconds());
    }
    if (from.has_millis()) {
      set_millis(from.millis());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbTime::CopyFrom(const PbTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PbTime::Swap(PbTime* other) {
  if (other != this) {
    std::swap(hour_, other->hour_);
    std::swap(minute_, other->minute_);
    std::swap(seconds_, other->seconds_);
    std::swap(millis_, other->millis_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbTime_descriptor_;
  metadata.reflection = PbTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbSystemDateTime::kDateFieldNumber;
const int PbSystemDateTime::kTimeFieldNumber;
const int PbSystemDateTime::kTrustedFieldNumber;
#endif  // !_MSC_VER

PbSystemDateTime::PbSystemDateTime()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.PbSystemDateTime)
}

void PbSystemDateTime::InitAsDefaultInstance() {
  date_ = const_cast< ::data::PbDate*>(&::data::PbDate::default_instance());
  time_ = const_cast< ::data::PbTime*>(&::data::PbTime::default_instance());
}

PbSystemDateTime::PbSystemDateTime(const PbSystemDateTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.PbSystemDateTime)
}

void PbSystemDateTime::SharedCtor() {
  _cached_size_ = 0;
  date_ = NULL;
  time_ = NULL;
  trusted_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbSystemDateTime::~PbSystemDateTime() {
  // @@protoc_insertion_point(destructor:data.PbSystemDateTime)
  SharedDtor();
}

void PbSystemDateTime::SharedDtor() {
  if (this != default_instance_) {
    delete date_;
    delete time_;
  }
}

void PbSystemDateTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbSystemDateTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbSystemDateTime_descriptor_;
}

const PbSystemDateTime& PbSystemDateTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proute_2eproto();
  return *default_instance_;
}

PbSystemDateTime* PbSystemDateTime::default_instance_ = NULL;

PbSystemDateTime* PbSystemDateTime::New() const {
  return new PbSystemDateTime;
}

void PbSystemDateTime::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_date()) {
      if (date_ != NULL) date_->::data::PbDate::Clear();
    }
    if (has_time()) {
      if (time_ != NULL) time_->::data::PbTime::Clear();
    }
    trusted_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbSystemDateTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.PbSystemDateTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .data.PbDate date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_time;
        break;
      }

      // required .data.PbTime time = 2;
      case 2: {
        if (tag == 18) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_trusted;
        break;
      }

      // required bool trusted = 3;
      case 3: {
        if (tag == 24) {
         parse_trusted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trusted_)));
          set_has_trusted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.PbSystemDateTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.PbSystemDateTime)
  return false;
#undef DO_
}

void PbSystemDateTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.PbSystemDateTime)
  // required .data.PbDate date = 1;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->date(), output);
  }

  // required .data.PbTime time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->time(), output);
  }

  // required bool trusted = 3;
  if (has_trusted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->trusted(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.PbSystemDateTime)
}

::google::protobuf::uint8* PbSystemDateTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.PbSystemDateTime)
  // required .data.PbDate date = 1;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->date(), target);
  }

  // required .data.PbTime time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->time(), target);
  }

  // required bool trusted = 3;
  if (has_trusted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->trusted(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.PbSystemDateTime)
  return target;
}

int PbSystemDateTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .data.PbDate date = 1;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->date());
    }

    // required .data.PbTime time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time());
    }

    // required bool trusted = 3;
    if (has_trusted()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbSystemDateTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbSystemDateTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbSystemDateTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbSystemDateTime::MergeFrom(const PbSystemDateTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_date()) {
      mutable_date()->::data::PbDate::MergeFrom(from.date());
    }
    if (from.has_time()) {
      mutable_time()->::data::PbTime::MergeFrom(from.time());
    }
    if (from.has_trusted()) {
      set_trusted(from.trusted());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbSystemDateTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbSystemDateTime::CopyFrom(const PbSystemDateTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbSystemDateTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_date()) {
    if (!this->date().IsInitialized()) return false;
  }
  if (has_time()) {
    if (!this->time().IsInitialized()) return false;
  }
  return true;
}

void PbSystemDateTime::Swap(PbSystemDateTime* other) {
  if (other != this) {
    std::swap(date_, other->date_);
    std::swap(time_, other->time_);
    std::swap(trusted_, other->trusted_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbSystemDateTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbSystemDateTime_descriptor_;
  metadata.reflection = PbSystemDateTime_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PbLocation_Fix_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbLocation_Fix_descriptor_;
}
bool PbLocation_Fix_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PbLocation_Fix PbLocation::FIX_NONE;
const PbLocation_Fix PbLocation::FIX_2D;
const PbLocation_Fix PbLocation::FIX_3D;
const PbLocation_Fix PbLocation::Fix_MIN;
const PbLocation_Fix PbLocation::Fix_MAX;
const int PbLocation::Fix_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PbLocation::kLatitudeFieldNumber;
const int PbLocation::kLongitudeFieldNumber;
const int PbLocation::kTimestampFieldNumber;
const int PbLocation::kFixFieldNumber;
const int PbLocation::kSatellitesFieldNumber;
#endif  // !_MSC_VER

PbLocation::PbLocation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.PbLocation)
}

void PbLocation::InitAsDefaultInstance() {
  timestamp_ = const_cast< ::data::PbSystemDateTime*>(&::data::PbSystemDateTime::default_instance());
}

PbLocation::PbLocation(const PbLocation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.PbLocation)
}

void PbLocation::SharedCtor() {
  _cached_size_ = 0;
  latitude_ = 0;
  longitude_ = 0;
  timestamp_ = NULL;
  fix_ = 0;
  satellites_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbLocation::~PbLocation() {
  // @@protoc_insertion_point(destructor:data.PbLocation)
  SharedDtor();
}

void PbLocation::SharedDtor() {
  if (this != default_instance_) {
    delete timestamp_;
  }
}

void PbLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbLocation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbLocation_descriptor_;
}

const PbLocation& PbLocation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proute_2eproto();
  return *default_instance_;
}

PbLocation* PbLocation::default_instance_ = NULL;

PbLocation* PbLocation::New() const {
  return new PbLocation;
}

void PbLocation::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbLocation*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(latitude_, longitude_);
    ZR_(fix_, satellites_);
    if (has_timestamp()) {
      if (timestamp_ != NULL) timestamp_->::data::PbSystemDateTime::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.PbLocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double latitude = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_longitude;
        break;
      }

      // required double longitude = 2;
      case 2: {
        if (tag == 17) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_timestamp;
        break;
      }

      // optional .data.PbSystemDateTime timestamp = 3;
      case 3: {
        if (tag == 26) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_fix;
        break;
      }

      // optional .data.PbLocation.Fix fix = 4;
      case 4: {
        if (tag == 32) {
         parse_fix:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::data::PbLocation_Fix_IsValid(value)) {
            set_fix(static_cast< ::data::PbLocation_Fix >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_satellites;
        break;
      }

      // optional uint32 satellites = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_satellites:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &satellites_)));
          set_has_satellites();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.PbLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.PbLocation)
  return false;
#undef DO_
}

void PbLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.PbLocation)
  // required double latitude = 1;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->latitude(), output);
  }

  // required double longitude = 2;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitude(), output);
  }

  // optional .data.PbSystemDateTime timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->timestamp(), output);
  }

  // optional .data.PbLocation.Fix fix = 4;
  if (has_fix()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->fix(), output);
  }

  // optional uint32 satellites = 5 [default = 0];
  if (has_satellites()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->satellites(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.PbLocation)
}

::google::protobuf::uint8* PbLocation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.PbLocation)
  // required double latitude = 1;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->latitude(), target);
  }

  // required double longitude = 2;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->longitude(), target);
  }

  // optional .data.PbSystemDateTime timestamp = 3;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->timestamp(), target);
  }

  // optional .data.PbLocation.Fix fix = 4;
  if (has_fix()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->fix(), target);
  }

  // optional uint32 satellites = 5 [default = 0];
  if (has_satellites()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->satellites(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.PbLocation)
  return target;
}

int PbLocation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double latitude = 1;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // required double longitude = 2;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // optional .data.PbSystemDateTime timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timestamp());
    }

    // optional .data.PbLocation.Fix fix = 4;
    if (has_fix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fix());
    }

    // optional uint32 satellites = 5 [default = 0];
    if (has_satellites()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->satellites());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbLocation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbLocation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbLocation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbLocation::MergeFrom(const PbLocation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_timestamp()) {
      mutable_timestamp()->::data::PbSystemDateTime::MergeFrom(from.timestamp());
    }
    if (from.has_fix()) {
      set_fix(from.fix());
    }
    if (from.has_satellites()) {
      set_satellites(from.satellites());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbLocation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbLocation::CopyFrom(const PbLocation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbLocation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_timestamp()) {
    if (!this->timestamp().IsInitialized()) return false;
  }
  return true;
}

void PbLocation::Swap(PbLocation* other) {
  if (other != this) {
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(fix_, other->fix_);
    std::swap(satellites_, other->satellites_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbLocation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbLocation_descriptor_;
  metadata.reflection = PbLocation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRoutePoint::kXOffsetFieldNumber;
const int PbRoutePoint::kYOffsetFieldNumber;
const int PbRoutePoint::kTimeOffsetFieldNumber;
const int PbRoutePoint::kZOffsetFieldNumber;
#endif  // !_MSC_VER

PbRoutePoint::PbRoutePoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.PbRoutePoint)
}

void PbRoutePoint::InitAsDefaultInstance() {
}

PbRoutePoint::PbRoutePoint(const PbRoutePoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.PbRoutePoint)
}

void PbRoutePoint::SharedCtor() {
  _cached_size_ = 0;
  x_offset_ = 0;
  y_offset_ = 0;
  time_offset_ = 0u;
  z_offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRoutePoint::~PbRoutePoint() {
  // @@protoc_insertion_point(destructor:data.PbRoutePoint)
  SharedDtor();
}

void PbRoutePoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbRoutePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRoutePoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRoutePoint_descriptor_;
}

const PbRoutePoint& PbRoutePoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proute_2eproto();
  return *default_instance_;
}

PbRoutePoint* PbRoutePoint::default_instance_ = NULL;

PbRoutePoint* PbRoutePoint::New() const {
  return new PbRoutePoint;
}

void PbRoutePoint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbRoutePoint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_offset_, z_offset_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRoutePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.PbRoutePoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 x_offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &x_offset_)));
          set_has_x_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y_offset;
        break;
      }

      // required sint32 y_offset = 2;
      case 2: {
        if (tag == 16) {
         parse_y_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &y_offset_)));
          set_has_y_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time_offset;
        break;
      }

      // optional uint32 time_offset = 3;
      case 3: {
        if (tag == 24) {
         parse_time_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_offset_)));
          set_has_time_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_z_offset;
        break;
      }

      // optional sint32 z_offset = 4;
      case 4: {
        if (tag == 32) {
         parse_z_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &z_offset_)));
          set_has_z_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.PbRoutePoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.PbRoutePoint)
  return false;
#undef DO_
}

void PbRoutePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.PbRoutePoint)
  // required sint32 x_offset = 1;
  if (has_x_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->x_offset(), output);
  }

  // required sint32 y_offset = 2;
  if (has_y_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->y_offset(), output);
  }

  // optional uint32 time_offset = 3;
  if (has_time_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_offset(), output);
  }

  // optional sint32 z_offset = 4;
  if (has_z_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->z_offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.PbRoutePoint)
}

::google::protobuf::uint8* PbRoutePoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.PbRoutePoint)
  // required sint32 x_offset = 1;
  if (has_x_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->x_offset(), target);
  }

  // required sint32 y_offset = 2;
  if (has_y_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->y_offset(), target);
  }

  // optional uint32 time_offset = 3;
  if (has_time_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_offset(), target);
  }

  // optional sint32 z_offset = 4;
  if (has_z_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->z_offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.PbRoutePoint)
  return target;
}

int PbRoutePoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 x_offset = 1;
    if (has_x_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->x_offset());
    }

    // required sint32 y_offset = 2;
    if (has_y_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->y_offset());
    }

    // optional uint32 time_offset = 3;
    if (has_time_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_offset());
    }

    // optional sint32 z_offset = 4;
    if (has_z_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->z_offset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRoutePoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRoutePoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRoutePoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRoutePoint::MergeFrom(const PbRoutePoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x_offset()) {
      set_x_offset(from.x_offset());
    }
    if (from.has_y_offset()) {
      set_y_offset(from.y_offset());
    }
    if (from.has_time_offset()) {
      set_time_offset(from.time_offset());
    }
    if (from.has_z_offset()) {
      set_z_offset(from.z_offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRoutePoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRoutePoint::CopyFrom(const PbRoutePoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRoutePoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PbRoutePoint::Swap(PbRoutePoint* other) {
  if (other != this) {
    std::swap(x_offset_, other->x_offset_);
    std::swap(y_offset_, other->y_offset_);
    std::swap(time_offset_, other->time_offset_);
    std::swap(z_offset_, other->z_offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRoutePoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRoutePoint_descriptor_;
  metadata.reflection = PbRoutePoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbPlannedRoute::kRouteIdFieldNumber;
const int PbPlannedRoute::kNameFieldNumber;
const int PbPlannedRoute::kLengthFieldNumber;
const int PbPlannedRoute::kStartLocationFieldNumber;
const int PbPlannedRoute::kStartAltitudeFieldNumber;
const int PbPlannedRoute::kPointFieldNumber;
#endif  // !_MSC_VER

PbPlannedRoute::PbPlannedRoute()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.PbPlannedRoute)
}

void PbPlannedRoute::InitAsDefaultInstance() {
  route_id_ = const_cast< ::data::PbRouteId*>(&::data::PbRouteId::default_instance());
  name_ = const_cast< ::data::PbOneLineText*>(&::data::PbOneLineText::default_instance());
  start_location_ = const_cast< ::data::PbLocation*>(&::data::PbLocation::default_instance());
}

PbPlannedRoute::PbPlannedRoute(const PbPlannedRoute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.PbPlannedRoute)
}

void PbPlannedRoute::SharedCtor() {
  _cached_size_ = 0;
  route_id_ = NULL;
  name_ = NULL;
  length_ = 0;
  start_location_ = NULL;
  start_altitude_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbPlannedRoute::~PbPlannedRoute() {
  // @@protoc_insertion_point(destructor:data.PbPlannedRoute)
  SharedDtor();
}

void PbPlannedRoute::SharedDtor() {
  if (this != default_instance_) {
    delete route_id_;
    delete name_;
    delete start_location_;
  }
}

void PbPlannedRoute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbPlannedRoute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbPlannedRoute_descriptor_;
}

const PbPlannedRoute& PbPlannedRoute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proute_2eproto();
  return *default_instance_;
}

PbPlannedRoute* PbPlannedRoute::default_instance_ = NULL;

PbPlannedRoute* PbPlannedRoute::New() const {
  return new PbPlannedRoute;
}

void PbPlannedRoute::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbPlannedRoute*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(length_, start_altitude_);
    if (has_route_id()) {
      if (route_id_ != NULL) route_id_->::data::PbRouteId::Clear();
    }
    if (has_name()) {
      if (name_ != NULL) name_->::data::PbOneLineText::Clear();
    }
    if (has_start_location()) {
      if (start_location_ != NULL) start_location_->::data::PbLocation::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbPlannedRoute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.PbPlannedRoute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .data.PbRouteId route_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_route_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required .data.PbOneLineText name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_length;
        break;
      }

      // optional float length = 3;
      case 3: {
        if (tag == 29) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_start_location;
        break;
      }

      // optional .data.PbLocation start_location = 4;
      case 4: {
        if (tag == 34) {
         parse_start_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_start_altitude;
        break;
      }

      // optional float start_altitude = 5;
      case 5: {
        if (tag == 45) {
         parse_start_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_altitude_)));
          set_has_start_altitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_point;
        break;
      }

      // repeated .data.PbRoutePoint point = 6;
      case 6: {
        if (tag == 50) {
         parse_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_point;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.PbPlannedRoute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.PbPlannedRoute)
  return false;
#undef DO_
}

void PbPlannedRoute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.PbPlannedRoute)
  // required .data.PbRouteId route_id = 1;
  if (has_route_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->route_id(), output);
  }

  // required .data.PbOneLineText name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->name(), output);
  }

  // optional float length = 3;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->length(), output);
  }

  // optional .data.PbLocation start_location = 4;
  if (has_start_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->start_location(), output);
  }

  // optional float start_altitude = 5;
  if (has_start_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->start_altitude(), output);
  }

  // repeated .data.PbRoutePoint point = 6;
  for (int i = 0; i < this->point_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->point(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.PbPlannedRoute)
}

::google::protobuf::uint8* PbPlannedRoute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.PbPlannedRoute)
  // required .data.PbRouteId route_id = 1;
  if (has_route_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->route_id(), target);
  }

  // required .data.PbOneLineText name = 2;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->name(), target);
  }

  // optional float length = 3;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->length(), target);
  }

  // optional .data.PbLocation start_location = 4;
  if (has_start_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->start_location(), target);
  }

  // optional float start_altitude = 5;
  if (has_start_altitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->start_altitude(), target);
  }

  // repeated .data.PbRoutePoint point = 6;
  for (int i = 0; i < this->point_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->point(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.PbPlannedRoute)
  return target;
}

int PbPlannedRoute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .data.PbRouteId route_id = 1;
    if (has_route_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->route_id());
    }

    // required .data.PbOneLineText name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->name());
    }

    // optional float length = 3;
    if (has_length()) {
      total_size += 1 + 4;
    }

    // optional .data.PbLocation start_location = 4;
    if (has_start_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_location());
    }

    // optional float start_altitude = 5;
    if (has_start_altitude()) {
      total_size += 1 + 4;
    }

  }
  // repeated .data.PbRoutePoint point = 6;
  total_size += 1 * this->point_size();
  for (int i = 0; i < this->point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->point(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbPlannedRoute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbPlannedRoute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbPlannedRoute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbPlannedRoute::MergeFrom(const PbPlannedRoute& from) {
  GOOGLE_CHECK_NE(&from, this);
  point_.MergeFrom(from.point_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_route_id()) {
      mutable_route_id()->::data::PbRouteId::MergeFrom(from.route_id());
    }
    if (from.has_name()) {
      mutable_name()->::data::PbOneLineText::MergeFrom(from.name());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_start_location()) {
      mutable_start_location()->::data::PbLocation::MergeFrom(from.start_location());
    }
    if (from.has_start_altitude()) {
      set_start_altitude(from.start_altitude());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbPlannedRoute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbPlannedRoute::CopyFrom(const PbPlannedRoute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbPlannedRoute::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_route_id()) {
    if (!this->route_id().IsInitialized()) return false;
  }
  if (has_name()) {
    if (!this->name().IsInitialized()) return false;
  }
  if (has_start_location()) {
    if (!this->start_location().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->point())) return false;
  return true;
}

void PbPlannedRoute::Swap(PbPlannedRoute* other) {
  if (other != this) {
    std::swap(route_id_, other->route_id_);
    std::swap(name_, other->name_);
    std::swap(length_, other->length_);
    std::swap(start_location_, other->start_location_);
    std::swap(start_altitude_, other->start_altitude_);
    point_.Swap(&other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbPlannedRoute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbPlannedRoute_descriptor_;
  metadata.reflection = PbPlannedRoute_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace data

// @@protoc_insertion_point(global_scope)
